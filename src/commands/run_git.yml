description: >
  Run Git operations to commit and push automatic fixes made by MegaLinter.
  This job is triggered only on the default branch and when the `run_git_operations`
  parameter is set to `true`. It checks if the `apply_fixes` parameter is also set
  to `true` and if the `persist_megalinter_reports` parameter is set to `true`.
  If all conditions are met, it attaches the workspace, checks if the `updated_sources`
  folder exists, gets the updated sources, sets up Git, and runs the Git operations.

parameters:
  github_token:
    type: env_var_name
    default: GITHUB_TOKEN
    description: |
      GitHub token to use for the reporters in megalinter
  persist_megalinter_reports:
    type: boolean
    default: false
    description: |
      Whether to persist the megalinter-reports folder for use in subsequent jobs.
      This can be useful for automatically updating files in your repository based on the linter's output.
  run_git_operations:
    type: boolean
    default: false
    description: |
      Whether to run git operations to commit and push changes
  git_pr_commit_message:
    type: string
    default: "Automated linting fixes by MegaLinter"
    description: |
      Commit message to use for Git
  git_pr_title:
    type: string
    default: "[MegaLinter] Apply linters automatic fixes"
    description: |
      Title to use for the pull request
  git_pr_branch_name:
    type: string
    default: "megalinter-fixes-$CIRCLE_BUILD_NUM"
    description: |
      Branch name to use for Git

steps:
  - attach_workspace:
      at: /root/project
  - run:
      name: Get and copy the files in updated sources
      command: <<include(scripts/get_updated_sources.sh)>>
      environment:
        PARAM_UPD_SRC_FILES: /root/project/megalinter-reports/updated_sources
  - gh/setup:
      token: <<parameters.github_token>>
  - run:
      name: Setup git
      environment:
        GH_BRANCH: <<parameters.git_pr_branch_name>>
        GH_COMMIT_MSG: <<parameters.gh_pr_commit_message>>
        GH_TITLE_MSG: <<parameters.gh_pr_title>>
      command: |
        git checkout -b "$GH_BRANCH"
        git add .
        git commit -m "$GH_COMMIT_MSG"
        gh pr create --title "$GH_TITLE_MSG"
