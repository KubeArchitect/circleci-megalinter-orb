description: >
  Run megalinter on your project.

parameters:
  github_token:
    type: string
    default: ""
    description: |
      GitHub token to use for the reporters in megalinter
  persist_megalinter_reports:
    type: boolean
    default: false
    description: |
      Whether to persist the megalinter-reports folder for use in subsequent jobs.
      This can be useful for automatically updating files in your repository based on the linter's output.
  working_directory:
    type: string
    default: "/tmp/lint"
    description: |
      The working directory to run megalinter in.
  apply_fixes:
    type: boolean
    default: true
    description: |
      If megalinter should apply fixes to the files.
  parallelism:
    type: integer
    default: 1
    description: |
      Number of parallel executors to use
  executor:
    type: executor
    default: default
    description: The name of executor to use.
  version:
    type: string
    default: latest
    description: |
      Choose a specific version of megalinter:
      https://hub.docker.com/r/oxsecurity/megalinter/tags
  flavor:
    type: string
    default: ""
    description: |
      Choose a specific flavor of megalinter:
      https://megalinter.io/latest/flavors/
  run_git_operations:
    type: boolean
    default: false
    description: |
      Whether to run git operations to commit and push changes
  git_user_email:
    type: string
    default: ""
    description: |
      Email to use for the Git user
  git_user_name:
    type: string
    default: ""
    description: |
      Name to use for the Git user
  git_commit_message:
    type: string
    default: "Automated linting fixes by MegaLinter"
    description: |
      Commit message to use for the Git user
  git_pr_title:
    type: string
    default: "[MegaLinter] Apply linters automatic fixes"
    description: |
      Title to use for the pull request
  git_branch_name:
    type: string
    default: "megalinter-fixes-$CIRCLE_BUILD_NUM"
    description: |
      Branch name to use for the Git user

environment:
  GITHUB_REF=$CI_PULL_REQUEST
  GITHUB_REPOSITORY=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
  GITHUB_RUN_ID=$CIRCLE_BUILD_NUM
  GITHUB_SHA=$CIRCLE_SHA1
  GITHUB_TOKEN=<<parameters.github_token>>
  GITHUB_WORKSPACE=$CIRCLE_WORKING_DIRECTORY
  CI_ACTION_RUN_URL=$CIRCLE_BUILD_URL
  DEFAULT_WORKSPACE=$CIRCLE_WORKING_DIRECTORY
  APPLY_FIXES=<<parameters.apply_fixes>>

executor: <<parameters.executor>>
parallelism: <<parameters.parallelism>>

working_directory: <<parameters.working_directory>>

steps:
  - checkout
  - run:
      name: Run Megalinter
      command: /bin/bash -ex /entrypoint.sh
  - when:
      condition: <<parameters.persist_megalinter_reports>>
      steps:
        - store_artifacts:
            path: megalinter-reports
        - persist_to_workspace:
            root: <<parameters.working_directory>>
            paths:
              - megalinter-reports
  - when:
      condition: <<parameters.run_git_operations>> && <<parameters.persist_megalinter_reports>> && <<parameters.apply_fixes>> && <<pipeline.git.branch.is_default>>
      steps:
        - run:
            name: Check if updated_sources folder exists
            command: |
              UPD_FILES=<<parameters.working_directory>>/megalinter-reports/updated_sources
              if [ ! -d "$UPD_FILES" ]; then
                echo "$UPD_FILES does not exist. Stopping job..."
                circleci-agent step halt
              fi
        - run:
            name: Get the updated sources in megalinter-reports
            command: |
              UPD_FILES=<<parameters.working_directory>>/megalinter-reports/updated_sources
              ITEMS=$(ls -A $UPD_FILES | grep -v '^\.$' | grep -v '^\.\.$')
              echo "Items in $UPD_FILES: $ITEMS"
              if [ -z "$ITEMS" ]; then
                echo "No updated sources found"
                exit 0
              else
                echo "Updated sources found. Copying files to the repository"
                cp -a $UPD_FILES/. .
        - github-cli/setup:
            token: <<parameters.github_token>>
        - run:
            name: Set up Git bot
            command: |
              git config --local user.email "<<parameters.git_user_email>>"
              git config --local user.name "<<parameters.git_user_name>>"
        - run:
            name: Create a new branch and commit the changes to the repository
            command: |
              git checkout -b <<parameters.git_branch_name>> \
              && git add . \
              && git commit -m '<<parameters.git_commit_message>>' \
              && git push --set-upstream origin <<parameters.git_branch_name>>
        - run:
            name: Create a pull request
            command: |
              gh pr create --title '<<parameters.git_pr_title>>' --body "<<parameters.git_commit_message>>" --base master --head <<parameters.git_branch_name>>
